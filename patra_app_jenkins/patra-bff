pipeline {
	agent {
        label {
            label "patra-patra-jenkins-slave1"
            customWorkspace "/var/lib/jenkins/workspace/${env.JOB_NAME}"
        }
	}

	parameters {
		choice(
			name: 'Deploy_Through',
			choices:"Branch\nImage",
			description: "You wanna deploy through Branch / Image!")
		string (
			name: 'BRANCH',
            defaultValue: 'prod',
            description: 'git branch want to deploy')
		string (
			name: 'ActiveProfile',
			defaultValue: 'prod',
			description: 'Active Profile want to deploy')
		string (
			name: 'image_version',
            defaultValue: '${BUILD_DISPLAY_NAME}',
            description: 'Please left as default or pass image you want to deploy through image.')
		choice(
			name: 'Run_Sonar',
			choices:"Yes\nNo",
			description: "Check sonar qualitygate!")
		choice(
			name: 'Environment',
			choices:"prod",
			description: "Environment!")

    }
    tools {
        maven "mvn-3.5.3"
    }
	stages {
		stage('Git checkout source code') {
            steps {
                checkout([$class: 'GitSCM',
					branches: [[name: '$BRANCH']],
					doGenerateSubmoduleConfigurations: false,
					extensions: [[$class: 'CleanBeforeCheckout']],
					submoduleCfg: [],
					userRemoteConfigs: [[credentialsId: '45650768-eed2-4d32-8f3-ed3d3d3w', url: 'https://git.patra.com/patra-backend/onepatra-backend.git']]
				])
				script {
					commit_id = sh(returnStdout: true, script: 'git rev-parse --short HEAD')
					commit_id = commit_id.replaceAll(/\s*$/, '')
				}
        }
		}

		stage("set build name"){
            steps {
                script {
						currentBuild.displayName = "${COUNTRY}-${ENVIRONMENT}-${BUILD_NUMBER}-${commit_id}-${RUN_SONAR}"
						currentBuild.description = "${COUNTRY}-${ENVIRONMENT}-${BUILD_NUMBER}-${commit_id}-${RUN_SONAR}"
                }
            }
		}

		stage('Git checkout K8s code') {
            steps {
                checkout([$class: 'GitSCM',
					branches: [[name: '*/master']],
					doGenerateSubmoduleConfigurations: false,
					extensions: [[$class: 'CleanCheckout', $class: 'RelativeTargetDirectory', relativeTargetDir: 'devops']],
					submoduleCfg: [],
					userRemoteConfigs: [[credentialsId: '45650768-eed2-4d32-8f3e-a8ca8257028a', url: 'https://git.patra.com/devops/patra/patra-eks-docker-code.git']]
				])
            }
        }

		stage ('Build & Run Test') {
			when {
                expression { params.Deploy_Through == 'Branch' }
            }
			steps {
				sh "mvn  --settings /var/lib/jenkins/.m2/settings.xml clean install -DskipTests"
			}
		}





	    stage('Image Build and upload to ECR') {
			when {
                expression { params.Deploy_Through == 'Branch' }
            }
			steps {
				sh '''
				imagename=patra-bff
				cd bifrost
				export pomversion=$(mvn build-helper:parse-version help:evaluate -Dexpression=project.version -q -DforceStdout );
				echo "$pomversion"
				cd ..
				echo "${image_version}"
				sed -ie "s/dtpomversion/"$pomversion"/g" devops/dockerfiles/Dockerfile-${imagename}
				aws ecr get-login --region eu-central-1 --no-include-email | bash
				./devops/patra_make_ecr_image.sh ${imagename} ${image_version}
				'''
			}
		}

        stage('Setup Prerequisites') {
            steps {
				script {
					skipRemainingStages = false
				}
            }
        }

	    stage('Deploy Stage?') {
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					input "Do you Want to deploy on prod env?"
					sh '''
					K8sENV=prod
					imagename=patra-bff
					sed -ie "s/jprofilevalue/$ActiveProfile/g" devops/shared/prod/${imagename}-${K8sENV}.yml
					sed -ie "s/${imagename}:.*$/${imagename}:${image_version}/g" devops/shared/prod/${imagename}-${K8sENV}.yml
					sed -ie "s/namespace:.*$/namespace: patra-shared-${K8sENV}/g" devops/shared/prod/${imagename}-${K8sENV}.yml
					export KUBECONFIG=/opt/kubernetes/patra-prod.yo-digital.com.kubeconfig
					kubectl apply -f devops/shared/prod/${imagename}-${K8sENV}.yml
					'''
				}
			}
		}

	    stage('API Health Check') {
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					sh '''
					imagename=bifrost
					#!/bin/bash
					sleep 20
					time=1
					while [ $time -lt 120 ]
					do
						sleep 5
						time=`expr $time + 6`
						httpstatus=$(curl -sI  https://${imagename}-${Country}.patra.com/actuator/health | awk  '{print $2}' | head -n 1)
						response=$(curl -s  https://${imagename}-${Country}.patra.com/actuator/health | awk -F':' '{print $2}' | awk -F',' '{print $1}' |tr -d  '"' | awk -F'}' '{print $1}' |tr -d  '"')
						if [ -z $response ]
							then
								response="curl api down"
								echo " Waiting for service to be up. waited $time sec"
						elif [ $response == UP -a $httpstatus == 200 ]
							then
								echo "Service is UP"
								exit
						fi
					done
					if [ $time  -ge 120 ]
					then
					echo "Service is not ready"
					fi
					'''
				}
			}
		}

	    stage('Rollback Stage?') {
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					script {
						env.DT_ROLL_BACK_STAGE = input message: 'User input required',
							parameters: [choice(name: 'Rollback', choices: 'no\nyes', description: 'Choose "yes" if you want to Rollback')]
					}
				}
			}
		}

        stage('RollingBack Stage') {
			when {
			environment(name: 'DT_ROLL_BACK_STAGE', value: 'yes')
			}
            steps {
				script {
					skipRemainingStages = true
					println "skipRemainingStages = ${skipRemainingStages}"
				}
				sh '''
				K8sENV=prod
				export KUBECONFIG=/opt/kubernetes/patra-prod.yo-digital.com.kubeconfig
				kubectl rollout undo deployment patra-bifrost --namespace patra-shared-${K8sENV}
				'''
            }
        }

	}

	post {
        success {
            mail to:"vinamra.gupta@telekom-digital.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}"
        }
        failure {
            mail to:"vinamra.gupta@telekom-digital.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}"
        }
    }

}
